var Armada = Armada || {};

Armada.Game = function() {
    var canvas, canvasSize, canvasContext, currentShip, currentShipLetter, messageId, timeoutId, selectedObjectId, options = {}, data = [], drawingSpace = {}, messageOpen = !1, objectIndex = 0, relativeDrawingSpace = {
        x: 8.52,
        y: 41.69,
        width: 81.64,
        height: 39.03
    }, paintingImages = {
        frame: "assets/img/game/painting-frame.gif",
        painting: "assets/img/game/painting-canvas.jpg"
    }, init = function(opt) {
        if (options = opt, void 0 == options.canvasId) throw "You must set options.canvasId with the ID of the canvas element";
        if (void 0 == options.errorId || void 0 == options.errorCloseId || void 0 == options.selectedObjectId) throw "You must set the following options: errorId, errorCloseId, selectedObjectId";
        canvas = document.getElementById(options.canvasId), canvasContext = canvas.getContext("2d"), 
        selectedObjectId = options.selectedObjectId, $(canvas).click(clickOnCanvas), $(canvas).mousemove(onMouseMove);
        var canvasBg = new Image();
        canvasBg.src = paintingImages.painting, canvasBg.onload = function() {
            canvasSize = {
                width: canvasBg.width,
                height: canvasBg.height
            }, canvas.width = canvasBg.width, canvas.height = canvasBg.height, $("#container").width(canvasBg.width), 
            canvasContext.drawImage(canvasBg, 0, 0, canvasSize.width, canvasSize.height), drawingSpace = calculateDrawingSpace(canvasBg.width, canvasBg.height, relativeDrawingSpace), 
            drawingSpace.scale = 100 / drawingSpace.height, options.debug && (canvasContext.fillStyle = "rgba(255, 255, 0, 0.5)", 
            canvasContext.fillRect(drawingSpace.x, drawingSpace.y, drawingSpace.width, drawingSpace.height)), 
            unpack();
        }, messageId = options.errorId, $("#" + messageId).css("display", "none"), $("#" + options.errorCloseId).click(function() {
            return closeMessage(), !1;
        }), $("#game-controls").find("a").on("click", function(e) {
            e.preventDefault();
            var tab, $target = $(e.target);
            $target.hasClass("english-fleet") ? tab = $("#english-fleet") : $target.hasClass("spanish-fleet") ? tab = $("#spanish-fleet") : $target.hasClass("monsters-and-objects") && (tab = $("#monsters-and-objects")), 
            $target.hasClass("active") ? resetCurrentOverlay() : (resetCurrentOverlay(), tab.fadeIn(), 
            $target.addClass("active"));
        }), setInterval(function() {
            redraw();
        }, 1e3);
    }, resetCurrentOverlay = function() {
        $(".game-overlay-window").each(function() {
            $(this).fadeOut();
        }), $("#game-controls").find("a").each(function() {
            $(this).removeClass("active");
        });
    }, calculateDrawingSpace = function(canvasWidth, canvasHeight, relativeSpace) {
        var space = {};
        return space.x = Math.round(canvasWidth * (relativeSpace.x / 100)), space.y = Math.round(canvasHeight * (relativeSpace.y / 100)), 
        space.width = Math.round(canvasWidth * (relativeSpace.width / 100)), space.height = Math.round(canvasHeight * (relativeSpace.height / 100)), 
        space.top = space.y, space.right = space.x + space.width, space.bottom = space.y + space.height, 
        space.left = space.x, space.scale = Math.round(100 / space.height), space;
    }, resetCanvas = function(callback) {
        var painting = new Image();
        painting.src = paintingImages.painting, painting.onload = function() {
            return canvasContext.drawImage(painting, 0, 0, canvasSize.width, canvasSize.height), 
            "function" == typeof callback && callback(), !0;
        };
    }, resetData = function() {
        data = [];
    }, attachImage = function(linkId, ship) {
        document.getElementById(linkId).onclick = function() {
            return selectShip(ship), !1;
        };
    }, selectShip = function(chosenShip) {
        closeMessage(), currentShip = new Image();
        var copyId = "object-" + chosenShip, copyFrom = document.getElementById(copyId);
        currentShip.src = copyFrom.src, currentShipLetter = chosenShip, resetCurrentOverlay(), 
        $(canvas).css("cursor", "none");
    }, clickOnCanvas = function(e) {
        var position = getCursorPosition(e), x = position.x, y = position.y;
        if (void 0 == currentShip) {
            var clickedShips = [], clickedShipsIds = [];
            return data.forEach(function(el, index) {
                x > el.x && x < el.x + el.width && y > el.y - el.height && y < el.y && (options.debug && (canvasContext.fillStyle = "rgba(0, 0, 255, 0.5)", 
                canvasContext.fillRect(el.x, el.y - el.height, el.width, el.height)), clickedShipsIds.push(index), 
                clickedShips.push(el));
            }), void (clickedShips.length > 0 && (clickedShips.sort(function(a, b) {
                return b.y - a.y;
            }), data.splice(clickedShipsIds[0], 1), redraw()));
        }
        return allowedToPlaceImage(x, y) ? (placeImage(currentShip, currentShipLetter, x, y), 
        redraw(), $("#cursor").remove(), $(canvas).css("cursor", "auto"), currentShip = null, 
        void (currentShipLetter = null)) : void displayMessage("You cannot place an image there! Try in the sea part of the painting!");
    }, onMouseMove = function(e) {
        if (void 0 != currentShip && null != currentShip) {
            var x, y;
            e.pageX || e.pageY ? (x = e.pageX, y = e.pageY) : (e.clientX || e.clientY) && (x = e.clientX + document.body.scrollLeft, 
            y = e.clientY + document.body.scrollTop);
            var $cursor = $("#cursor");
            0 == $cursor.length && ($cursor = $("body").prepend('<div id="cursor"><img src="' + currentShip.src + '"></div>'));
            var imageHeight = $cursor.find("img").height(), imageWidth = $cursor.find("img").width();
            $cursor.css({
                top: y - imageHeight / 2 - 20,
                left: x - imageWidth / 2
            });
        }
    }, getImageScale = function(y) {
        var scaleMin = .1, scaleMax = .6, imageScale = (y - drawingSpace.y) * drawingSpace.scale / 100 * scaleMax;
        return imageScale > scaleMax && (imageScale = scaleMax), scaleMin > imageScale && (imageScale = scaleMin), 
        imageScale;
    }, allowedToPlaceImage = function(x, y) {
        return x >= drawingSpace.left && x <= drawingSpace.right && y >= drawingSpace.top && y <= drawingSpace.bottom;
    }, displayMessage = function(message) {
        var messageDiv = $("#" + messageId);
        messageOpen && messageDiv.html() == message || (messageOpen = !0, messageDiv.html(message), 
        clearTimeout(timeoutId), messageDiv.fadeIn(400, function() {
            timeoutId = setTimeout(function() {
                closeMessage();
            }, 5e3);
        }));
    }, closeMessage = function() {
        messageOpen && (messageOpen = !1, $("#" + messageId).fadeOut());
    }, placeImageFromData = function(chosenShip, x, y, addToDataArray) {
        addToDataArray = void 0 === addToDataArray ? !0 : addToDataArray;
        var newShip = new Image(), copyId = "object-" + chosenShip, copyFrom = document.getElementById(copyId);
        newShip.src = copyFrom.src, placeImage(newShip, chosenShip, x, y, addToDataArray, !1);
    }, placeImage = function(ship, shipLetter, x, y, addToDataArray, calculatePosition) {
        addToDataArray = void 0 === addToDataArray ? !0 : addToDataArray, calculatePosition = void 0 === calculatePosition ? !0 : calculatePosition, 
        closeMessage();
        var context = canvas.getContext("2d"), scale = getImageScale(y), width = Math.round(ship.width * scale), height = Math.round(ship.height * scale);
        calculatePosition === !0 ? (x -= width / 2, y -= height, x = Math.round(x), y = Math.round(y)) : y -= height, 
        addToDataArray && (data.push({
            id: objectIndex,
            ship: shipLetter,
            x: x,
            y: y + height,
            width: width,
            height: height
        }), objectIndex++), context.drawImage(ship, x, y, width, height), options.debug && (canvasContext.fillStyle = "rgba(0, 255, 0, 0.5)", 
        canvasContext.fillRect(x, y, width, height)), updateShareLink();
    }, redraw = function() {
        resetCanvas(function() {
            data.sort(function(a, b) {
                return a.y - b.y;
            }), data.forEach(function(ele) {
                placeImageFromData(ele.ship, ele.x, ele.y, !1);
            });
        });
    }, getCursorPosition = function(e) {
        var x, y, canoffset = $(canvas).offset();
        return x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft - Math.floor(canoffset.left), 
        y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop - Math.floor(canoffset.top) + 1, 
        {
            x: x,
            y: y
        };
    }, updateShareLink = function() {
        if (data.length > 0) {
            var shareLink = document.getElementById("share-link");
            shareLink.href = document.URL + "#" + pack(data);
        }
    }, pack = function(data) {
        var element, output = "";
        if (0 == data.length) return output;
        for (var i = 0; i < data.length; i++) element = data[i], output += element.x + element.ship.toLowerCase() + element.y, 
        i < data.length - 1 && (output += ";");
        return output;
    }, unpack = function() {
        for (var result, ship, x, y, getParams = window.location.hash.substring(1), params = getParams.split(";"), c = 0; c < params.length; c++) result = params[c].search(/[a-z]/), 
        -1 != result && (x = params[c].substr(0, result), ship = params[c].substr(result, 1), 
        y = params[c].substr(result + 1, params[c].length), placeImageFromData(ship.toUpperCase(), x, y));
    }, outputPng = function() {
        window.location = canvas.toDataURL("image/png");
    };
    return {
        init: init,
        attachImage: attachImage,
        outputPng: outputPng,
        resetCanvas: resetCanvas,
        resetData: resetData
    };
}();