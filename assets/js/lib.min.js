function msieversion() {
    return /MSIE 10/i.test(navigator.userAgent) ? !0 : /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) ? !0 : /Edge\/12./i.test(navigator.userAgent) ? !0 : !1;
}

var Armada = Armada || {};

Armada.Carousel = function(element, config) {
    this.element = element, this.controls = element.closest(".component").find(".controls"), 
    this.config = config || {}, this.config.onLeave = {}, this.config.onInit = {}, this.config.onChange = {}, 
    this.totalSlides = element.find(".slide").length, this.currentSlide = 1, this.setupControls(), 
    this.goToSlide(1), "function" == typeof this.config.onInit && this.config.onInit(this);
}, Armada.Carousel.prototype.setupControls = function() {
    var thisObject = this;
    this.controls.each(function() {
        $(this).find("a").each(function() {
            if ($(this).hasClass("next")) $(this).on("click", function(e) {
                e.preventDefault(), thisObject.nextSlide();
            }); else if ($(this).hasClass("prev")) $(this).on("click", function(e) {
                e.preventDefault(), thisObject.prevSlide();
            }); else {
                var attr = $(this).attr("data-slide");
                isNaN(attr) || $(this).on("click", function(e) {
                    e.preventDefault(), thisObject.goToSlide(attr);
                });
            }
        });
    });
}, Armada.Carousel.prototype.nextSlide = function() {
    this.currentSlide += 1, this.currentSlide > this.totalSlides && (this.currentSlide = 1), 
    this.changeSlide();
}, Armada.Carousel.prototype.prevSlide = function() {
    this.currentSlide -= 1, this.currentSlide < 1 && (this.currentSlide = this.totalSlides), 
    this.changeSlide();
}, Armada.Carousel.prototype.goToSlide = function(slide) {
    (slide > this.totalSlides || 1 > slide) && (slide = 1), this.currentSlide = slide, 
    this.changeSlide();
}, Armada.Carousel.prototype.hideAllSlides = function() {
    var carousel = this, i = 0;
    this.element.find(".slide").each(function() {
        i++, $(this).hasClass("active") && ($(this).removeClass("active"), $(this).find("*").stop(), 
        "function" == typeof carousel.config.onLeave && carousel.config.onLeave(i, $(this)));
    }), this.controls.find("a").each(function() {
        $(this).hasClass("active") && $(this).removeClass("active");
    });
}, Armada.Carousel.prototype.changeSlide = function() {
    var currentSlide = this.currentSlide, activeSlide = this.element.find(".slide").eq(currentSlide - 1);
    if (this.hideAllSlides(), activeSlide.addClass("active"), this.controls.find("a").each(function() {
        void 0 !== $(this).attr("data-slide") && $(this).attr("data-slide") == currentSlide && $(this).addClass("active");
    }), "function" == typeof this.config.onChange && this.config.onChange(this.currentSlide, activeSlide), 
    "undefined" != typeof this.config.animation) {
        var animations = this.config.animation;
        for (var element in animations) if (animations.hasOwnProperty(element)) {
            var animation = animations[element].animation || "fade", duration = animations[element].duration || 500, delay = animations[element].delay || 0, $e = activeSlide.find(element);
            $e.stop().hide(), activeSlide.stop(), activeSlide.queue(queueMethod.bind(void 0, $e, animation, duration, delay));
        }
    }
};

var queueMethod = function($e, animation, duration, delay) {
    "fade" == animation && ($e.delay(delay).fadeIn(duration), $(this).dequeue());
};

Armada.Overlay = function() {
    var scrollEnabled = !0, zoomOverlayElement = "#zoom-overlay", show = function(type, id, section) {
        var overlay = $(".overlay");
        overlay.fadeIn(), "zoom" == type && ($(zoomOverlayElement).show(), $.get("ajax/" + section + "/" + id + ".html").done(function(html) {
            $("#zoom-overlay-content").html(html);
            {
                var image = ($(".zoom-image-container"), $(".zoom-image")), imageZoomLevel = $(".image-zoom-level");
                document.getElementById("range-input");
            }
            image.panzoom({
                $zoomRange: imageZoomLevel,
                startTransform: "scale(0.7)",
                minScale: .8,
                contain: "invert"
            }).panzoom("zoom");
            var sliderStep = .05, imageZoom = $("#image-zoom-level-ui").slider({
                min: .8,
                max: 5,
                step: sliderStep,
                orientation: "vertical"
            });
            imageZoom.on("slide slidechange", function(event, ui) {
                imageZoomLevel.val(ui.value), imageZoomLevel[0].onInput();
            }), $(".ui-zoom-label-in").click(function() {
                var currentSliderVal = imageZoom.slider("value"), newZoomLevel = currentSliderVal + 4 * sliderStep;
                imageZoom.slider("value", newZoomLevel);
            }), $(".ui-zoom-label-out").click(function() {
                var currentSliderVal = imageZoom.slider("value"), newZoomLevel = currentSliderVal - 4 * sliderStep;
                imageZoom.slider("value", newZoomLevel);
            });
        }).fail(function() {
            hide(), alert("There was a problem loading the content");
        }));
    }, hide = function() {
        var overlay = $(".overlay");
        scrollEnabled = !0, overlay.fadeOut(), $("#video-overlay").fadeOut(), $("#audio-overlay").fadeOut(), 
        $("#zoom-overlay").fadeOut(), $("#audio-overlay-content").html(""), $("#audio-player").stop(), 
        overlay.off("click");
    };
    return {
        show: show,
        hide: hide
    };
}(), Armada.Timeline = function() {
    var offset, interval, docHeight, timeline, timelineElements, timelineText, numberOfElements, create = function(timelineValues) {
        offset = -75, timeline = $("#timeline"), timelineElements = [], timelineText = [];
        for (var element in timelineValues) if (timelineValues.hasOwnProperty(element)) {
            var $element = $(element);
            $element.length > 0 && (timelineElements.push($element), timelineText.push(timelineValues[element]));
        }
        numberOfElements = timelineElements.length, createTimelineElements(), resizeTimeline(), 
        docHeight = $(document).height(), interval = setInterval(checkDocumentHeight, 100);
    }, createTimelineElements = function() {
        for (var i = 0; i < timelineElements.length; i++) {
            var elementOffset = timelineElements[i].offset().top - timelineElements[0].offset().top;
            timeline.append('<span id="timeline-tag-' + i + '" class="timeline-tag" style="top: ' + elementOffset + 'px">' + timelineText[i] + "</span>");
        }
    }, resizeTimeline = function() {
        var e1y = timelineElements[0].offset().top, e2y = timelineElements[numberOfElements - 1].offset().top, height = e2y - e1y;
        timeline.css({
            top: e1y + offset,
            height: height
        });
        for (var i = 0; i < timelineElements.length; i++) {
            var elementOffset = timelineElements[i].offset().top - e1y;
            timeline.find("#timeline-tag-" + i).css({
                top: elementOffset
            });
        }
    }, checkDocumentHeight = function() {
        var newDocHeight = $(document).height();
        newDocHeight != docHeight && (resizeTimeline(), docHeight = newDocHeight);
    };
    return {
        create: create
    };
}(), Armada.AudioPictureViewer = function() {
    var audio, $audio, timeEvents, imageDisplay, currentImage = 0, init = function(audioId, timePoints) {
        audio = document.getElementById(audioId), $audio = $("#" + audioId), timeEvents = timePoints, 
        imageDisplay = $(".images-display"), setTimeout(function() {
            audio = document.getElementById(audioId), $audio = $("#" + audioId), audio && audio.addEventListener("timeupdate", timeUpdate, !1), 
            timeUpdate(!0);
        }, 500);
    }, timeUpdate = function(initialUpdate) {
        initialUpdate = initialUpdate || !1;
        var image = getCurrentImage();
        (image != currentImage || initialUpdate === !0) && (currentImage = image, resetImages(), 
        imageDisplay.find("li:nth-child(" + image + ")").addClass("visible"));
    }, resetImages = function() {
        imageDisplay.find("li").each(function() {
            $(this).removeClass("visible");
        });
    }, getCurrentImage = function() {
        var current;
        if (audio) {
            for (var time = Math.floor(audio.currentTime), i = 0; i < timeEvents.length; i++) if (i == timeEvents.length - 1) {
                if (timeEvents[i] <= time) {
                    current = i;
                    break;
                }
            } else if (timeEvents[i] <= time && time < timeEvents[i + 1]) {
                current = i;
                break;
            }
            return current === !1 || isNaN(current) ? !1 : current + 1;
        }
        return 1;
    }, pause = function() {
        audio && audio.pause();
    }, play = function() {
        audio && audio.play();
    };
    return {
        init: init,
        currentImage: currentImage,
        pause: pause,
        play: play
    };
}(), Armada.Panorama = function() {
    var activePicture = 0, init = function() {
        $(".panorama-overlay").parent().find(".close-btn").click(function(e) {
            e.preventDefault(), $("#painting-" + activePicture).hide(), activePicture = 0, $(this).hide();
        });
        var addClasses = function() {
            for (var hotspotArr = krpano.get("hotspot").getArray(), hotspotHover = function() {
                $(".krpano-hotspot").addClass("knockback");
            }, hotspotOut = function() {
                $(".krpano-hotspot").removeClass("knockback");
            }, i = 0; i < hotspotArr.length; i++) {
                var $hotspotWrapper = $(hotspotArr[i].sprite), hotspotImage = $(hotspotArr[i].sprite).css("background-image").match(/\((.*?)\)/)[1].replace(/('|")/g, ""), $hotspotImageElement = $("<img/>");
                $hotspotImageElement.attr("src", hotspotImage), msieversion() || $hotspotImageElement.addClass("animated pulse"), 
                $hotspotWrapper.html($hotspotImageElement).css("background-image", "none").addClass("krpano-hotspot"), 
                $hotspotWrapper.hover(hotspotHover, hotspotOut);
            }
        }, krpano = Armada.Panorama.krpano();
        krpano && krpano.set && (krpano.set("events.onloadcomplete", addClasses), krpano.set("events.keep", !0));
    };
    hideOverlays = function() {
        var overlay = $(".panorama-overlay");
        overlay.children().each(function() {
            $(this).hide();
        });
    };
    var showOverlay = function(id) {
        activePicture = id, hideOverlays(), $("#painting-" + id).show(), $(".panorama-overlay").parent().find(".close-btn").show();
    }, viewPainting = function(id) {
        activePicture = id, hideOverlays();
        var $overlay = $("#painting-" + id), paintingUrl = $overlay.find("a").attr("href");
        paintingUrl ? window.location.href = paintingUrl : ($overlay.show(), $(".panorama-overlay").parent().find(".close-btn").show());
    }, showHotspotOverlay = function(id) {
        var $content = $("#hotspot-content-" + id);
        $.magnificPopup.open({
            items: {
                src: $content
            },
            type: "inline",
            preloader: !0,
            removalDelay: 300,
            gallery: {
                enabled: !1
            },
            callbacks: {
                open: function() {
                    var $audio = this.currItem.src.find("audio");
                    if ($audio.length > 0) {
                        var startTime = $audio.data("startTime");
                        "undefined" != typeof startTime ? processAudio(startTime) : processAudio();
                    }
                },
                beforeClose: function() {
                    unprocessAudio(), $(".mfp-wrap").removeClass("no-animation");
                }
            },
            midClick: !0
        });
    }, lookAtPicture = function(id) {
        krpano().call("looktohotspot(painting" + id + ",80)"), showOverlay(id);
    }, turn = function(direction) {
        var hlookat = Number(krpano().get("view.hlookat"));
        hlookat += "right" == direction ? 10 : -10, krpano().set("view.hlookat", hlookat);
    }, tilt = function(direction) {
        var vlookat = Number(krpano().get("view.vlookat"));
        vlookat += "down" == direction ? 10 : -10, krpano().set("view.vlookat", vlookat);
    }, zoom = function(direction) {
        var fov = Number(krpano().get("view.fov"));
        fov += "out" == direction ? 10 : -10, krpano().set("view.fov", fov);
    }, krpano = function() {
        return document.getElementById("krpanoSWFObject");
    };
    return {
        init: init,
        showOverlay: showOverlay,
        viewPainting: viewPainting,
        showHotspotOverlay: showHotspotOverlay,
        hideOverlays: hideOverlays,
        lookAtPicture: lookAtPicture,
        turn: turn,
        tilt: tilt,
        zoom: zoom,
        activePicture: activePicture,
        krpano: krpano
    };
}();